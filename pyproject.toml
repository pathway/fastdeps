[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fastdeps"
version = "1.1.0"
description = "Lightning-fast Python dependency analyzer with MCP server support"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "FastDeps Team", email = "fastdeps@example.com"},
]
maintainers = [
    {name = "FastDeps Team", email = "fastdeps@example.com"},
]
keywords = [
    "dependencies",
    "dependency-analysis",
    "ast",
    "python",
    "static-analysis",
    "import-analysis",
    "circular-dependencies",
    "visualization",
    "development-tools",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]

[project.urls]
Homepage = "https://github.com/fastdeps/fastdeps"
Documentation = "https://fastdeps.readthedocs.io"
Repository = "https://github.com/fastdeps/fastdeps.git"
"Bug Tracker" = "https://github.com/fastdeps/fastdeps/issues"
Changelog = "https://github.com/fastdeps/fastdeps/blob/main/CHANGELOG.md"

[project.scripts]
fastdeps = "fastdeps.cli:main"

[project.optional-dependencies]
mcp = [
    "mcp>=1.0.0",  # Model Context Protocol support
]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-timeout>=2.1",
    "black>=22.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
]
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.18",
]
viz = [
    "graphviz>=0.20",  # Optional for better visualization
]
all = [
    "mcp>=1.0.0",  # Include MCP in 'all' extras
    "graphviz>=0.20",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["fastdeps*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=fastdeps",
    "--cov-report=term-missing",
    "--cov-report=html",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
branch = true
source = ["fastdeps"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]